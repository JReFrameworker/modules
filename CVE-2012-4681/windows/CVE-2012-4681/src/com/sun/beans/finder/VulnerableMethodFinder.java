package com.sun.beans.finder;

import java.lang.reflect.Method;
import java.lang.reflect.Modifier;
import java.lang.reflect.Type;

import com.sun.beans.util.Cache;

import jreframeworker.annotations.methods.DefineMethod;
import jreframeworker.annotations.methods.DefineMethodVisibility;
import jreframeworker.annotations.types.DefineTypeFinality;
import jreframeworker.annotations.types.MergeType;

@DefineTypeFinality(type = "com.sun.beans.finder.MethodFinder", finality = false)
@DefineMethodVisibility(type = "com.sun.beans.finder.MethodFinder", method = "MethodFinder", visibility = "public")
@MergeType
public class VulnerableMethodFinder extends com.sun.beans.finder.MethodFinder {

	public VulnerableMethodFinder(String name, Class<?>[] args) {
		super(name, args);
	}

	private static final Cache<Signature, Method> CACHE = null;
	
	@DefineMethod
	public static Method findAccessibleMethod(Method paramMethod) throws NoSuchMethodException {
		Class<?> localClass = paramMethod.getDeclaringClass();
//		if ((Modifier.isPublic(localClass.getModifiers())) && (ReflectUtil.isPackageAccessible(localClass))) {
		if (Modifier.isPublic(localClass.getModifiers())) {
			return paramMethod;
		}
		if (Modifier.isStatic(paramMethod.getModifiers())) {
			throw new NoSuchMethodException("Method '" + paramMethod.getName() + "' is not accessible");
		}
		Type[] arrayOfType = localClass.getGenericInterfaces();
		int i = arrayOfType.length;
		int j = 0;
		while (j < i) {
			Type localType = arrayOfType[j];
			try {
				return findAccessibleMethod(paramMethod, localType);
			} catch (NoSuchMethodException localNoSuchMethodException) {
				j++;
			}
		}
		return findAccessibleMethod(paramMethod, localClass.getGenericSuperclass());
	}
	
	@DefineMethod
	public static Method findMethod(Class<?> paramClass, String paramString, Class<?>... paramVarArgs)
			throws NoSuchMethodException {
		if (paramString == null) {
			throw new IllegalArgumentException("Method name is not set");
		}
		PrimitiveWrapperMap.replacePrimitivesWithWrappers(paramVarArgs);
		Signature localSignature = new Signature(paramClass, paramString, paramVarArgs);
		try {
			Method localMethod = (Method) CACHE.get(localSignature);
//			return (localMethod == null) || (ReflectUtil.isPackageAccessible(localMethod.getDeclaringClass())) ? localMethod : (Method) CACHE.create(localSignature);
			return (localMethod == null) || true ? localMethod : (Method) CACHE.create(localSignature);
			// equiv to?
//			if(localMethod == null){
//				return localMethod;
//			}
		} catch (SignatureException localSignatureException) {
			throw localSignatureException.toNoSuchMethodException("Method '" + paramString + "' is not found");
		}
	}
	
	// place holder for the real thing
	private static Method findAccessibleMethod(Method paramMethod, Type paramType) throws NoSuchMethodException {
		return null;
	}

}
