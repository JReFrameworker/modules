package com.sun.beans.finder;

import jreframeworker.annotations.methods.DefineMethod;
import jreframeworker.annotations.methods.DefineMethodVisibility;
import jreframeworker.annotations.types.DefineTypeFinality;
import jreframeworker.annotations.types.MergeType;

@DefineTypeFinality(type = "com.sun.beans.finder.ClassFinder", finality = false)
@DefineMethodVisibility(type = "com.sun.beans.finder.ClassFinder", method = "ClassFinder", visibility = "public")
@MergeType
public class VulnerableClassFinder extends com.sun.beans.finder.ClassFinder {

	@DefineMethod
	public static Class<?> findClass(String paramString) throws ClassNotFoundException {
//		ReflectUtil.checkPackageAccess(paramString);
		try {
			ClassLoader localClassLoader = Thread.currentThread().getContextClassLoader();
			if (localClassLoader == null) {
				localClassLoader = ClassLoader.getSystemClassLoader();
			}
			if (localClassLoader != null) {
				return Class.forName(paramString, false, localClassLoader);
			}
		} catch (ClassNotFoundException localClassNotFoundException) {
		} catch (SecurityException localSecurityException) {
		}
		return Class.forName(paramString);
	}

	@DefineMethod
	public static Class<?> findClass(String paramString, ClassLoader paramClassLoader) throws ClassNotFoundException {
//		ReflectUtil.checkPackageAccess(paramString);
		if (paramClassLoader != null) {
			try {
				return Class.forName(paramString, false, paramClassLoader);
			} catch (ClassNotFoundException localClassNotFoundException) {
			} catch (SecurityException localSecurityException) {
			}
		}
		return findClass(paramString);
	}

}
